import type { GetServerSideProps } from "next";
import Head from "next/head";
import { ParsedUrlQuery } from "querystring";
import dbConnect from "utils/dbConnect";
import Coach from "model/CoachModel";
import { ICoachSchemaData } from "model/CoachModel";
import Link from "next/link";
import { Labels } from "@/utils/labels";

function CoachReport({ searchedCoach }: { searchedCoach: ICoachSchemaData }) {
  return (
    <>
      <Head>
        <title>Coach data</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto">
        <div className="text-2xl font-mono my-3 text-center capitalize">
          coach {searchedCoach.coachNumber}(
          <span className="text-cyan-700">{searchedCoach.coachType}</span>) data
        </div>
        <div>
          <div>
            {Object.entries(Labels).map(([key, value]) => (
              <div key={key}>
                {/*  @ts-expect-error: */}
                {value}:{searchedCoach[key]}
              </div>
            ))}
          </div>
          <div className="my-3">
            <Link href={`/form/updatecoach/${searchedCoach._id}`} passHref>
              <a className="capitalize cursor-pointer text-blue-400 text-sm font-semibold border-solid border rounded-md border-sky-500 p-2">
                update coach data
              </a>
            </Link>
          </div>
        </div>
        <div>
          <div className="capitalize text-xl">report :</div>
          {searchedCoach.coachReport?.length == 0 ? (
            <span>no report</span>
          ) : (
            <ol>
              {searchedCoach.coachReport?.map((rep) => (
                <li key={rep._id}>
                  <div>date : {rep.date}</div>
                  <div>report details : {rep.reportDetails}</div>
                  <div>escorting fitter : {rep.escortingFitter}</div>
                  {rep.action ? <div>Action : {rep.action}</div> : null}
                  {rep.maintenanceFitter ? (
                    <div>Maintenance Fitter:{rep.maintenanceFitter}</div>
                  ) : null}
                  <div>
                    <Link href={`/form/updatereport/${rep._id}`} passHref>
                      <a>update report</a>
                    </Link>
                  </div>
                </li>
              ))}
            </ol>
          )}
        </div>
      </main>
    </>
  );
}
export const getServerSideProps: GetServerSideProps = async (context: {
  params?: { id: string } | ParsedUrlQuery | undefined;
}) => {
  await dbConnect();
  const id = context.params?.id;
  const searchedCoach = await Coach.findOne({ _id: id })
    .select("-__v")
    .populate("coachReport");
  return {
    props: {
      searchedCoach: JSON.parse(JSON.stringify(searchedCoach)),
    },
  };
};
export default CoachReport;
