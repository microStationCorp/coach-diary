import reportModel, { IReportSchemaData } from "@/model/reportModel";
import dbConnect from "@/utils/dbConnect";
import { GetServerSideProps } from "next";
import Head from "next/head";
import { ParsedUrlQuery } from "querystring";
import { reportLabel } from "utils/labels";
import { SubmitHandler, useForm } from "react-hook-form";
import { ReportData } from "@/utils/interface";
import { CustomButton } from "component/CustomButton";
import { InputClass } from "@/utils/classes";

function UpdateReport({ coach_report }: { coach_report: IReportSchemaData }) {
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors, isSubmitSuccessful },
  } = useForm<ReportData>();

  const onSubmit: SubmitHandler<ReportData> = (data) => {
    fetch("/api/updatereport", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ ...data, report_id: coach_report._id }),
    }).then((res) => {
      res.json().then((d) => console.log(d));
    });
  };

  return (
    <>
      <Head>
        <title> Coach report Update</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <main className="container mx-auto flex items-center flex-col">
        <div className="capitalize text-2xl font-mono my-3 text-center">
          {coach_report.coach.coachNumber}(
          <span className="text-cyan-700">{coach_report.coach.coachType}</span>)
          report Update
        </div>
        <form onSubmit={handleSubmit(onSubmit)}>
          <div className="flex flex-col items-center mt-5 gap-6 bg-cyan-100 p-5 rounded-lg shadow-md">
            <div className="flex flex-col gap-3">
              {Object.entries(reportLabel).map(([key, value]) => {
                return (
                  <div key={key}>
                    {value} :
                    <input
                      className={InputClass}
                      // @ts-ignore
                      {...register(key)}
                      defaultValue={coach_report[key]}
                    />
                  </div>
                );
              })}
            </div>
            <div>
              <CustomButton />
            </div>
          </div>
        </form>
      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context: {
  params?: { id: string } | ParsedUrlQuery | undefined;
}) => {
  await dbConnect();
  const report_id = context.params?.id;
  try {
    const coach_report = await reportModel
      .findById(report_id)
      .populate("coach", "_id coachNumber coachType");
    return {
      props: {
        coach_report: JSON.parse(JSON.stringify(coach_report)),
      },
    };
  } catch (error) {
    return {
      props: {},
      redirect: {
        destination: "/404",
      },
    };
  }
};

export default UpdateReport;
