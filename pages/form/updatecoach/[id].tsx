import CoachModel, { ICoachSchemaData } from "@/model/CoachModel";
import { InputClass } from "@/utils/classes";
import dbConnect from "@/utils/dbConnect";
import { CoachData } from "@/utils/interface";
import { Labels } from "@/utils/labels";
import { CustomButton } from "component/CustomButton";
import Head from "next/head";
import { GetServerSideProps } from "next/types";
import { ParsedUrlQuery } from "querystring";
import { SubmitHandler, useForm } from "react-hook-form";

const UpdateCoach = ({
  searchedCoach,
}: {
  searchedCoach: ICoachSchemaData;
}) => {
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors, isSubmitSuccessful },
  } = useForm<CoachData>();
  const onSubmit: SubmitHandler<CoachData> = (data) => {
    fetch("/api/updatecoach", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ ...data, _id: searchedCoach._id }),
    }).then((res) => {
      res.json().then((d) => console.log(d));
    });
  };
  return (
    <>
      <Head>
        <title> Coach data Update</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <main className="container mx-auto flex items-center flex-col">
        <div className="capitalize text-2xl font-mono my-3 text-center">
          update {searchedCoach.coachNumber}(
          <span className="text-cyan-700">{searchedCoach.coachType}</span>)
          coach data{" "}
        </div>
        <form onSubmit={handleSubmit(onSubmit)}>
          <div className="flex flex-col items-center mt-5 gap-6 bg-cyan-100 p-5 rounded-lg shadow-md">
            <div className="flex flex-col gap-3">
              {Object.entries(Labels).map(([key, value]) => {
                if (key !== "coachType" && key !== "coachNumber")
                  return (
                    <div key={key}>
                      {value}:
                      <input
                        className={InputClass}
                        // @ts-ignore
                        defaultValue={searchedCoach[key]}
                        // @ts-ignore
                        {...register(key)}
                      />
                    </div>
                  );
              })}
            </div>
            <div>
              <CustomButton />
            </div>
          </div>
        </form>
      </main>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async (context: {
  params?: { id: string } | ParsedUrlQuery | undefined;
}) => {
  await dbConnect();
  const coach_id = context.params?.id;
  try {
    const searchedCoach = await CoachModel.findById(coach_id).select(
      "-coachReport"
    );
    return {
      props: {
        searchedCoach: JSON.parse(JSON.stringify(searchedCoach)),
      },
    };
  } catch (error) {
    return {
      props: {},
      redirect: {
        destination: "/404",
      },
    };
  }
};

export default UpdateCoach;
